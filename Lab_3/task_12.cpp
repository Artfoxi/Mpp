Задание 12: Синхронизация вывода 2
Условие: Докажите, что задача 11 не может быть решена с использованием двух мьютексов без использования других средств синхронизации.
Ответ: Использование только двух мьютексов (без условных переменных или других механизмов синхронизации) не позволяет гарантировать строгое чередование между потоками. Вот почему:
1.	Роль мьютексов: Мьютексы предназначены для защиты критических секций, чтобы предотвратить одновременный доступ к общим ресурсам (например, std::cout). Один мьютекс может защитить вывод, чтобы строки не перемешивались, но он не может управлять порядком выполнения потоков.
2.	Попытка с двумя мьютексами: 
-	Предположим, у нас есть два мьютекса: mutex1 и mutex2.
-	Родительский поток захватывает mutex1, выводит строку, затем освобождает mutex1 и пытается захватить mutex2.
-	Дочерний поток захватывает mutex2, выводит строку, затем освобождает mutex2 и пытается захватить mutex1.
-	Проблема: мьютексы не могут гарантировать, что после освобождения mutex1 родительским потоком дочерний поток сразу захватит его. Планировщик потоков может снова дать управление родительскому потоку, и он снова захватит mutex1, нарушив чередование.
3.	Отсутствие механизма ожидания: Мьютексы не предоставляют способа "ждать" своей очереди. Без условных переменных (pthread_cond_t) или других средств (например, семафоров) потоки не могут синхронизироваться так, чтобы гарантировать чередование. Один поток может захватывать мьютекс многократно, пока другой ждет, что приводит к выводу всех строк одного потока подряд.
4.	Вывод: Для строгого чередования нужно средство, которое позволяет потоку ждать, пока другой поток не завершит свою работу и не "разрешит" ему продолжить. Мьютексы сами по себе этого не обеспечивают. В задаче 11 мы использовали условные переменные (pthread_cond_t) и флаг parent_turn, чтобы добиться чередования, что подтверждает, что только мьютексы недостаточны.
